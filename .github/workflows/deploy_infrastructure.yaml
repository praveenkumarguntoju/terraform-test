name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
      - dev
      - uat
  pull_request:
    branches:
      - main
      - dev
      - uat

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.environment }}
    strategy:
      matrix:
        environment: [dev]
    outputs:
      validationResult: ${{ steps.validate.outputs.result }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest
        terraform_wrapper: false
        
    - name: OIDC Login to Azure Public Cloud
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

       # Run az commands to confirm sub access
    - name: 'Run az commands'
      run: |
        az account show

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run:  terraform init -backend-config=./environments/${{ matrix.environment }}/backend.tfvars

    - name: Terraform Validate
      id: validate
      run: |
        terraform validate
        echo "result=success" >> $GITHUB_OUTPUT

  terraform-plan-apply:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: needs.terraform-validate.outputs.validationResult == 'success'
    environment:
      name: ${{ matrix.environment }}

    strategy:
      matrix:
        environment: [dev]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: OIDC Login to Azure Public Cloud
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets['AZURE_SUBSCRIPTION_ID'] }}

    - name: Terraform Init with Backend Config
      run: terraform init -backend-config=./environments/${{ matrix.environment }}/backend.tfvars

    - name: Terraform Plan with Detailed Exit Code
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out=tfplan -var-file=./environments/${{ matrix.environment }}/terraform.tfvars || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed!"
          exit 1
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan

    - name: Create String Output of Terraform Plan
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      if: ${{ steps.tf-plan.outputs.exitcode }} == '2'
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/uat' || github.ref == 'refs/heads/dev' && steps.tf-plan.outputs.exitcode == '2'
      run: terraform apply -var-file=./environments/${{ matrix.environment }}/terraform.tfvars -var="vm_password=${{ secrets.VM_PASSWORD }}" -auto-approve -auto-approve tfplan
