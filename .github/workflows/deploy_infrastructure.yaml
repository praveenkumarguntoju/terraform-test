name: Terraform CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan-apply:
    name: 'Terraform Format & Validate & Plan & Apply'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, prod]

    steps:
    
    - name: Dump GitHub AZURE_CLIENT_ID
      run: |
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID  }}
          run: echo "${{ secrets.AZURE_CLIENT_ID  }}"
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Set Environment Secrets
      run: |
        if [ "${{ matrix.environment }}" == 'dev' ]; then
          echo "${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "AUTO_APPROVE_FLAG=-auto-approve" >> $GITHUB_ENV
        else
          echo "ARM_CLIENT_ID=${{ secrets.PROD_AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.PROD_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.PROD_AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "AUTO_APPROVE_FLAG=" >> $GITHUB_ENV
        fi

    - name: OIDC Login to Azure Public Cloud
      uses: azure/login@v1
      with:
        client-id: ${{ env.ARM_CLIENT_ID }}
        tenant-id: ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: Terraform Init with Backend Config
      run: terraform init -backend-config=./environments/${{ matrix.environment }}/backend.tfvars

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate

    - name: Publish Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out=tfplan -var-file=./environments/${{ matrix.environment }}/terraform.tfvars || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed!"
          exit 1
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan

    - name: Create String Output of Terraform Plan
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      if: ${{ steps.tf-plan.outputs.exitcode }} == '2'
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && matrix.environment == 'prod'
      run: terraform apply tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && matrix.environment == 'dev'
      run: terraform apply $AUTO_APPROVE_FLAG tfplan
